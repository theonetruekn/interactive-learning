[{"instance_id": "django__django-15272", "model_name_or_path": "test", "model_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex 4b3e3c1c2c..a5bcf4a531 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -11,6 +11,7 @@ from django.apps import apps\n from django.conf import settings\n from django.core.management.base import (\n     BaseCommand, CommandError, CommandParser, handle_default_options,\n+)\n from django.core.management.color import color_style\n from django.db import DEFAULT_DB_ALIAS\n from django.utils.decorators import classproperty\n@@ -18,6 +19,7 @@ from django.utils.deprecation import RemovedInDjango50Warning\n \n # Default Django command-line options.\n DEFAULT_OPTIONS = frozenset([\n+    'optimizemigration',\n     'version',\n     'verbosity',\n     'settings',\n@@ -171,6 +173,7 @@ class ManagementUtility:\n         \"\"\"\n         Load the command class given its app_label and name.\n         \"\"\"\n+        from django.core.management.commands.optimizemigration import Command\n         return apps.get_app_config(app_label).management_module.Command()\n \n     def fetch_command(self, subcommand):\ndiff --git a/django/core/management/commands/optimizemigration.py b/django/core/management/commands/optimizemigration.py\nnew file mode 100644\nindex 0000000000..2faeb95c7d\n--- /dev/null\n+++ b/django/core/management/commands/optimizemigration.py\n@@ -0,0 +1,25 @@\n+from django.core.management.base import BaseCommand, CommandError\n+from django.db.migrations.optimizer import MigrationOptimizer\n+from django.db.migrations.writer import MigrationWriter\n+\n+class Command(BaseCommand):\n+    help = \"Optimizes the given migration.\"\n+\n+    def add_arguments(self, parser):\n+        parser.add_argument('app_label', help='App label of the migration to optimize')\n+        parser.add_argument('migration_name', help='Name of the migration to optimize')\n+\n+    def handle(self, *args, **options):\n+        app_label = options['app_label']\n+        migration_name = options['migration_name']\n+\n+        try:\n+            migration = self.load_migration(app_label, migration_name)\n+        except LookupError:\n+            raise CommandError(\"Migration %s in app %s doesn't exist\" % (migration_name, app_label))\n+\n+        optimized_migration = MigrationOptimizer().optimize(migration)\n+        writer = MigrationWriter(optimized_migration)\n+        with open(writer.path, \"w\") as fh:\n+            fh.write(writer.as_string())\n+        self.stdout.write(self.style.SUCCESS('Optimized migration \"%s\" in app \"%s\"' % (migration_name, app_label)))\n"}, {"instance_id": "django__django-15127", "model_name_or_path": "test", "model_patch": "--- a/django/contrib/messages/storage/base.py\n+++ b/django/contrib/messages/storage/base.py\n@@ -52,6 +52,7 @@\n                 if self._loaded_data is None:\n                     self._loaded_data = self.load()\n                 level, message, extra_tags = self._loaded_data\n+                extra_tags.update(self.get_level_tags())\n                 return {\n                     'message': message,\n                     'level': level,\n"}, {"instance_id": "django__django-7188", "model_name_or_path": "test", "model_patch": "--- a/django/contrib/auth/__init__.py\n+++ b/django/contrib/auth/__init__.py\n@@ -6,6 +6,9 @@ from django.middleware.csrf import rotate_token\n \n from .models import Permission, User\n \n+from .checks import check_models_permissions, check_user_model\n+from .management import create_permissions\n+\n default_app_config = 'django.contrib.auth.apps.AuthConfig'\n \n \n@@ -14,3 +17,13 @@ def get_user_model():\n         return User\n     from django.conf import settings\n     return settings.AUTH_USER_MODEL\n+\n+\n+# Allow auth machinery to be used without installing auth app\n+\n+import django.db.models.signals\n+django.db.models.signals.post_migrate.connect(\n+    create_permissions,\n+    dispatch_uid=\"django.contrib.auth.management.create_permissions\"\n+) \n+\n"}, {"instance_id": "django__django-12933", "model_name_or_path": "test", "model_patch": "--- a/django/contrib/sessions/management/commands/clearsessions.py\n+++ b/django/contrib/sessions/management/commands/clearsessions.py\n@@ -15,10 +15,7 @@ class Command(BaseCommand):\n         try:\n             engine.SessionStore.clear_expired()\n         except NotImplementedError:\n-            self.stderr.write(\n-                \"Session engine '%s' doesn't support clearing expired \"\n-                \"sessions.\" % settings.SESSION_ENGINE\n-            )\n+            raise CommandError(\"Session engine '%s' doesn't support clearing expired sessions.\" % settings.SESSION_ENGINE)\n"}, {"instance_id": "django__django-11099", "model_name_or_path": "test", "model_patch": "--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -7,7 +7,7 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,7 +17,7 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n"}, {"instance_id": "django__django-12009", "model_name_or_path": "test", "model_patch": "--- a/setup.py\n+++ b/setup.py\n@@ -47,7 +47,6 @@\n         'Programming Language :: Python :: 3.4',\n     ],\n     scripts=[\n-        'django/bin/django-admin.py',\n     ],\n     entry_points={\n         'console_scripts': [\n"}, {"instance_id": "django__django-12172", "model_name_or_path": "test", "model_patch": "--- a/django/conf/__init__.py\n+++ b/django/conf/__init__.py\n@@ -249,6 +249,9 @@ class Settings:\n         # Authentication\n         'AUTHENTICATION_BACKENDS': ['django.contrib.auth.backends.ModelBackend'],\n \n+        # Async safety checks\n+        'ASYNC_UNSAFE_CHECKS_DISABLED': False,\n+\n         # Channels\n         'CHANNEL_LAYERS': {},\n \n--- a/django/utils/asyncio.py\n+++ b/django/utils/asyncio.py\n@@ -1,5 +1,6 @@\n import asyncio\n import functools\n+from django.conf import settings\n \n from django.core.exceptions import SynchronousOnlyOperation\n \n@@ -18,7 +19,8 @@ def async_unsafe(message):\n             except RuntimeError:\n                 pass\n             else:\n-                if event_loop.is_running():\n+                if event_loop.is_running() and \\\n+                   not settings.ASYNC_UNSAFE_CHECKS_DISABLED:\n                     raise SynchronousOnlyOperation(message)\n             # Pass onwards.\n             return func(*args, **kwargs)\n"}, {"instance_id": "django__django-5470", "model_name_or_path": "test", "model_patch": "--- a/django/__init__.py\n+++ b/django/__init__.py\n@@ -14,6 +14,7 @@ def setup():\n     from django.conf import settings\n     from django.utils.log import configure_logging\n \n+    from django.urls import set_script_prefix\n     set_script_prefix(settings.FORCE_SCRIPT_NAME or '')\n     configure_logging(settings.LOGGING_CONFIG, settings.LOGGING)\n     apps.populate(settings.INSTALLED_APPS)\n"}, {"instance_id": "django__django-7475", "model_name_or_path": "test", "model_patch": "--- a/django/core/management/commands/diffsettings.py\n+++ b/django/core/management/commands/diffsettings.py\n@@ -14,10 +14,15 @@\n     requires_system_checks = False\n \n     def add_arguments(self, parser):\n-        parser.add_argument(\n-            '--all', action='store_true', dest='all', default=False,\n-            help='Display all settings, regardless of their value. Default values are prefixed by \"###\".',\n-        )\n+        parser.add_argument('--all', action='store_true', dest='all', default=False,\n+                            help='Display all settings, regardless of their value. '\n+                                 'Default values are prefixed by \"###\".')\n+        parser.add_argument('--default', dest='default', default='default',\n+                            help='The settings module to compare the current settings against. '\n+                                 'Defaults to the Django default settings.')\n+\n+    def get_default_settings(self):\n+        return importlib.import_module(self.default)\n \n     def handle(self, **options):\n         # Inspired by Postfix's \"postconf -n\".\n@@ -27,7 +32,7 @@\n         settings._setup()\n \n         user_settings = module_to_dict(settings._wrapped)\n-        default_settings = module_to_dict(global_settings)\n+        default_settings = module_to_dict(self.get_default_settings())\n \n         output = []\n         for key in sorted(user_settings):\n"}, {"instance_id": "django__django-15474", "model_name_or_path": "test", "model_patch": "--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -8,6 +8,7 @@\n from django.db import migrations\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.state import ProjectState\n+from django.contrib.contenttypes.models import ContentType\n \n \n class MigrationExecutor:\n@@ -104,6 +105,13 @@\n         # Run the migration operation\n         operation.database_forwards(self.app_label, schema_editor, project_state, new_state)\n \n+        # Populate ContentType name field for non-default databases\n+        if schema_editor.connection.alias != 'default':\n+            content_types = new_state.apps.get_model('contenttypes', 'ContentType')\n+            for ct in content_types.objects.using(schema_editor.connection.alias).all():\n+                ct.name = ct.model_class()._meta.object_name\n+                ct.save()\n+\n         # Update database schema\n         schema_editor.deferred_sql = []\n         schema_editor.atomic.__enter__()\n"}]